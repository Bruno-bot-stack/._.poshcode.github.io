<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>PoshCode</title>
		<link>http://PoshCode.org/video/</link>
		<description>Community resources for PowerShell coders</description>
		<language>en</language>
		<lastbuilddate>Wed, 08 Aug 2018 07:51:07 GMT</lastbuilddate>
		<generator>http://HuddledMasses.org/PowerSite</generator>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
			<item>
				<title>Become a PowerShell Debugging Ninja by Kirk Munro</title>
				<dc:creator>PowerShell.org</dc:creator>
				<guid ispermalink="true">http://PoshCode.org/video/devops-global-summit-2018-2018-05-02-become-a-powershell-debugging-ninja-by-kirk-munro/index.html</guid>
				<description><![CDATA[<p><a href="https://www.youtube.com/watch?v=zhjU24hbYuI"><img src="https://i3.ytimg.com/vi/zhjU24hbYuI/hqdefault.jpg" alt="Become a PowerShell Debugging Ninja by Kirk Munro" title="Become a PowerShell Debugging Ninja by Kirk Munro" /></a></p>
<p>You've written PowerShell scripts or functions, and maybe packaged them up in a module. Then suddenly, when you least expect it, it shows up. It's red, and it's scary. You've hit a bug. But fear not! You, too, can become a PowerShell Debugging Ninja! Come to this session to learn how! Hi-yaaaaaaaah!
You will learn:</p>
<ol>
<li>&quot;Soft&quot; debugging skills that reduce or eliminate the need to work with a PowerShell debugger when it's not necessary.</li>
<li>&quot;Hard&quot; debugging skills that will help you get the most value for the least effort when working with the PowerShell debugger.</li>
<li>Best practices and tips and tricks that increase reliability and efficiency when writing and debugging PowerShell scripts and modules.</li>
</ol>]]></description>
			</item>
			<item>
				<title>The Build Release Pipeline Model for Mere Mortals  by Ryan Coates</title>
				<dc:creator>PowerShell.org</dc:creator>
				<guid ispermalink="true">http://PoshCode.org/video/devops-global-summit-2018-2018-05-02-the-build-release-pipeline-model-for-mere-mortals-by-ryan-coates/index.html</guid>
				<description><![CDATA[<p><a href="https://www.youtube.com/watch?v=ccEO5buASv8"><img src="https://i4.ytimg.com/vi/ccEO5buASv8/hqdefault.jpg" alt="The Build Release Pipeline Model for Mere Mortals  by Ryan Coates" title="The Build Release Pipeline Model for Mere Mortals  by Ryan Coates" /></a></p>
<p>As automators, there are many benefits to be gained by utilizing a build/release pipeline outside of the dev team. Join me as I show you just a few of the possibilities these powerful tools provide us</p>]]></description>
			</item>
			<item>
				<title>Getting started with Just Enough Administration (JEA) by Jason Helmick</title>
				<dc:creator>PowerShell.org</dc:creator>
				<guid ispermalink="true">http://PoshCode.org/video/devops-global-summit-2018-2018-05-02-getting-started-with-just-enough-administration-jea-by-jason-helmick/index.html</guid>
				<description><![CDATA[<p><a href="https://www.youtube.com/watch?v=zftC6eDzRJY"><img src="https://i3.ytimg.com/vi/zftC6eDzRJY/hqdefault.jpg" alt="Getting started with Just Enough Administration (JEA) by Jason Helmick" title="Getting started with Just Enough Administration (JEA) by Jason Helmick" /></a></p>
<p>In this fast paced “how-to” presentation, Let Jason Helmick take you the creation and implementation of JEA endpoints for secured administration and help you reduce the number of admins with excessive privilege. You will also learn how to gradually and safely implement JEA based on best practices.</p>]]></description>
			</item>
			<item>
				<title>PowerShell Team: Inventory Your Server Environment and Detect Change at Scale by Jenny Hunter</title>
				<dc:creator>PowerShell.org</dc:creator>
				<guid ispermalink="true">http://PoshCode.org/video/devops-global-summit-2018-2018-05-02-powershell-team-inventory-your-server-environment-and-detect-change-at-scale-by-jenny-hunter/index.html</guid>
				<description><![CDATA[<p><a href="https://www.youtube.com/watch?v=91A_Bsyzu-g"><img src="https://i2.ytimg.com/vi/91A_Bsyzu-g/hqdefault.jpg" alt="PowerShell Team: Inventory Your Server Environment and Detect Change at Scale by Jenny Hunter" title="PowerShell Team: Inventory Your Server Environment and Detect Change at Scale by Jenny Hunter" /></a></p>
<p>PowerShell Team: Inventory Your Server Environment and Detect Change at Scale</p>]]></description>
			</item>
			<item>
				<title>Connecting the Dots with PowerShell by Warren Frame</title>
				<dc:creator>PowerShell.org</dc:creator>
				<guid ispermalink="true">http://PoshCode.org/video/devops-global-summit-2018-2018-05-02-connecting-the-dots-with-powershell-by-warren-frame/index.html</guid>
				<description><![CDATA[<p><a href="https://www.youtube.com/watch?v=5SVRCkUtKJU"><img src="https://i2.ytimg.com/vi/5SVRCkUtKJU/hqdefault.jpg" alt="Connecting the Dots with PowerShell by Warren Frame" title="Connecting the Dots with PowerShell by Warren Frame" /></a></p>
<p>One of PowerShell's greatest strengths is its ability to glue pretty much any technologies together. We'll use that strength to pull data from a number of services, connecting the resulting dots with a graph database that could be used as a lightweight CMDB.</p>
<p>We'll talk about:</p>
<ul>
<li><p>Different interfaces PowerShell can use, from modules to .NET libraries</p>
</li>
<li><p>Graph databases like Neo4j, and how these can be useful for sysadmins</p>
</li>
<li><p>A practical (janky) CMDB, and why these can be useful</p>
<h2>Why the topic:</h2>
</li>
</ul>
<p>I'm a fan of CMDBs that have useful data.  They can drive automation, monitoring and alerting, reporting, and anything else that benefits from visibility.</p>
<p>It just so happens that:</p>
<ul>
<li><p>This is a great way to illustrate the various ways to talk to things in PowerShell (modules, web APIs, .NET libraries, binaries, etc.)</p>
</li>
<li><p>Graph databases are awesome, and map to real life systems more easily than the cumbersome fun of primary keys, foreign keys, and strict schemas</p>
</li>
<li><p>Neo4j has a free, cross platform community edition, and there's a simple PowerShell module to work with it</p>
</li>
<li><p>We can instill other important lessons, e.g. modules/abstraction, community/sharing</p>
</li>
<li><p>We can provide a practical example that folks without a reasonable CMDB could borrow and extend</p>
</li>
<li><p>Heavy weight, expensive, actual CMDBs are a poor fit for shops adopting DevOps practices and principles</p>
</li>
</ul>]]></description>
			</item>
	</channel>
</rss>